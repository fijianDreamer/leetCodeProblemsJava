/* Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints 
 * of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.
 * Notice that you may not slant the container.
 */

class Solution 
{
    public int maxArea(int[] height) 
    {
        int largest = 0; // This the variable that contains the largest area of container
        int shortLine = 0;
        int i = 0;
        int j = height.length - 1; // The last height in array height
        // Go thru the array, find the smaller line. Then calculate the area of container. if this 
        // is  the largest, save in largest, else go to next one.
        while(i < j)
        {
            shortLine = Math.min(height[i], height[j]);
            largest = Math.max(largest, shortLine * (j - i));
            if(height[i] < height[j])
            {
                i++;
            }
            else
            {
                j--;
            }
        }
        // Return largest
        return largest;
        
        // Time Complexity: O(n) since we only go through the array once
    }
}
