/* Given two version numbers, version1 and version2, compare them.
 * Version numbers consist of one or more revisions joined by a dot '.'. Each revision consists of digits and may contain leading zeros.
 * Every revision contains at least one character. Revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision 
 * being revision 1, and so on. For example 2.5.33 and 0.1 are valid version numbers.
 *
 * To compare version numbers, compare their revisions in left-to-right order. Revisions are compared using their integer value ignoring any leading zeros.
 * This means that revisions 1 and 001 are considered equal. If a version number does not specify a revision at an index, then treat the revision as 0. For
 * example, version 1.0 is less than version 1.1 because their revision 0s are the same, but their revision 1s are 0 and 1 respectively, and 0 < 1.
 *
 * Return the following:
 * If version1 < version2, return -1.
 * If version1 > version2, return 1.
 * Otherwise, return 0.
 */

class Solution 
{
    public int compareVersion(String version1, String version2) 
    {
        // Split the string by the . character
        String[] nums1 = version1.split("\\.");
        String[] nums2 = version2.split("\\.");
        // Get the lengths of both strings
        int n1Length = nums1.length, n2Length = nums2.length;

        // compare versions
        int i1, i2;
        for (int i = 0; i < Math.max(n1Length, n2Length); ++i) 
        {
            // If one string is longer that the other, add 0 to the end
            i1 = i < n1Length ? Integer.parseInt(nums1[i]) : 0;
            i2 = i < n2Length ? Integer.parseInt(nums2[i]) : 0;
            // i1 and i2 are not the same, return the result
            if (i1 != i2) 
            {
                return i1 > i2 ? 1 : -1;
            }
        }
        // the versions are equal
        return 0;
        
    }
}
