/* Convert a non-negative integer num to its English words representation.
 */

class Solution {
  public String one(int num) 
  {
    switch(num) 
    {
      case 1: return "One";
      case 2: return "Two";
      case 3: return "Three";
      case 4: return "Four";
      case 5: return "Five";
      case 6: return "Six";
      case 7: return "Seven";
      case 8: return "Eight";
      case 9: return "Nine";
    }
    return "";
  }

    // Get 10 - 19
  public String twoLessThan20(int num) 
  {
    switch(num) 
    {
      case 10: return "Ten";
      case 11: return "Eleven";
      case 12: return "Twelve";
      case 13: return "Thirteen";
      case 14: return "Fourteen";
      case 15: return "Fifteen";
      case 16: return "Sixteen";
      case 17: return "Seventeen";
      case 18: return "Eighteen";
      case 19: return "Nineteen";
    }
    return "";
  }

   // The tens 
  public String ten(int num) 
  {
    switch(num) 
    {
      case 2: return "Twenty";
      case 3: return "Thirty";
      case 4: return "Forty";
      case 5: return "Fifty";
      case 6: return "Sixty";
      case 7: return "Seventy";
      case 8: return "Eighty";
      case 9: return "Ninety";
    }
    return "";
  }

  public String two(int num) 
  {
    if (num == 0)
    {
        return "";   
    }
    else if (num < 10) // 9
    {
        return one(num);   
    }
    else if (num < 20) // 11
    {
        return twoLessThan20(num);   
    }
    else // Number is 10, 20, etc
    {
      int tenner = num / 10;
      int rest = num - tenner * 10;
      if (rest != 0)
      {
        return ten(tenner) + " " + one(rest);   
      }
      else
      {
        return ten(tenner);          
      }
    }
  }

  // Get the 100s. Breaks down to ones place and 10s place
  public String three(int num) 
  {
    int hundred = num / 100; // 543
    int rest = num - (hundred * 100); // 543 - (5*100) = 43
    String result = "";
    if (hundred*rest != 0)
    {
        result = one(hundred) + " Hundred " + two(rest);
    }
    else if ((hundred == 0) && (rest != 0))
    {
        result = two(rest);
    }
    else if ((hundred != 0) && (rest == 0))
    {
        result = one(hundred) + " Hundred";
    }
    return result;
  }

  public String numberToWords(int num) 
  {
    if (num == 0)
    {
      return "Zero";        
    }

    // Break the number down into 3s. E.G. hundreds, thousands, etc.
    int billion = num / 1000000000; // The remainder is millions, thousands, hundreds spots
    int million = (num - billion * 1000000000) / 1000000; // Get rid of billion, now get million
    int thousand = (num - billion * 1000000000 - million * 1000000) / 1000;
    int rest = num - billion * 1000000000 - million * 1000000 - thousand * 1000;

    String result = "";
    if (billion != 0)
    {
      result = three(billion) + " Billion";        
    }
    if (million != 0) 
    {
      if (! result.isEmpty())
        result += " ";
      result += three(million) + " Million";
    }
    if (thousand != 0) 
    {
      if (! result.isEmpty())
      {
        result += " ";   
      }
      result += three(thousand) + " Thousand";
    }
    if (rest != 0) 
    {
      if (! result.isEmpty())
        result += " ";
      result += three(rest);
    }
    return result;
  }
}
