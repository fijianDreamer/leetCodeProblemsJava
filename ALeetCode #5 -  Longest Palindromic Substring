class Solution {
    /* Given a string s, return the longest palindromic substring in s.
     */
    
    public String longestPalindrome(String s) 
    {
        if (s == null || s.length() < 1) return "";
        int start = 0, end = 0;
        for (int i = 0; i < s.length(); i++) 
        {
            // Expand around i b/c i is the center -- 'aba'
            int len1 = expandAroundCenter(s, i, i);
            // Expand around ij b/c there are two centers -- 'abba'
            int len2 = expandAroundCenter(s, i, i + 1);
            int len = Math.max(len1, len2);
            // If there is a new bigger palindrome, get the indexes
            if (len > end - start) 
            {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }
        // Return palindrome
        return s.substring(start, end + 1);
}

    private int expandAroundCenter(String s, int left, int right) 
    {
        int L = left, R = right;
        // while in the string, and the characters are the same, expand
        while (L >= 0 && R < s.length() && s.charAt(L) == s.charAt(R)) 
        {
            L--;
            R++;
        }
        return R - L - 1;
    }

}
