/*
Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).

The algorithm for myAtoi(string s) is as follows:

Read in and ignore any leading whitespace.
Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.
Read in next the characters until the next non-digit charcter or the end of the input is reached. The rest of the string is ignored.
Convert these digits into an integer (i.e. "123" -> 123, "0032" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).
If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.
Return the integer as the final result.
*/

class Solution {
    public int myAtoi(String s) {
        
                
        // First, get rid of any whitespaces by using trim()
        s = s.trim();
        
        // If string is empty, return 0
        if(s == null || s.length() == 0) 
        {
            return 0;
        }
        
        // Make result double to handle overflow cases
        double result = 0;
        
        
        // Sign is for positive or negative sign. Set as false(default) as per instructions
        boolean isNegative = false;
        
        int startIndex = 0;
        
        if(s.charAt(0) == '+' || s.charAt(0) == '-') 
        {
            if(s.charAt(0) == '-') 
            {
                isNegative = true;
            }
            ++startIndex; // Go to next index
        }
        
        
        // Normal Cases = "123"
        for(int i = startIndex; i < s.length(); i++) 
        {
            // if ascii value is below or above 0 or 9, break. These are non numeric characters
            if(s.charAt(i) < '0' || s.charAt(i) > '9') 
            { 
                break;
            }
            // Convert the string # to an actual #
            int digitValue = (int)(s.charAt(i) - '0');
            result = (result*10) + digitValue;
        }
        
        // If the number is -, toggle the result
        if(isNegative) 
        {
            result = -result;
        }
        
        // Handle underflow or overflow of the # as per the instructions
        if(result < Integer.MIN_VALUE) 
        {
            return Integer.MIN_VALUE;
        }
        if(result > Integer.MAX_VALUE) 
        {
            return Integer.MAX_VALUE;
        }
        // Everything is normal, return result
        return (int)result;
        
        // Time Complexity is O(n)
        
    }
}
