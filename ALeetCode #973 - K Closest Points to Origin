/* Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).
 * The distance between two points on the X-Y plane is the Euclidean distance (i.e., âˆš(x1 - x2)2 + (y1 - y2)2).
 * You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).
 */

class Solution 
{
    public int[][] kClosest(int[][] points, int k) 
    {
        PriorityQueue<int[]>maxHeap = new PriorityQueue<>((a,b) -> (b[0]*b[0] + b[1]*b[1] - (a[0]*a[0]          + a[1]*a[1]))); // The equation
        
        // For every point in our points, add to heap
        for(int[]point : points)
        {
            maxHeap.add(point);
            if(maxHeap.size() > k) // Remove furthest point
            {
                maxHeap.remove();
            }
        }
        
        // We now have our k points. Put results in int[][]result and return
        int[][]result = new int[k][2];
        while(k-- > 0)
        {
            result[k] = maxHeap.remove();
        }
        return result;
    }
}
