/* Instructions: Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:
 *
 * '.' Matches any single character.
 * '*' Matches zero or more of the preceding element.
 * The matching should cover the entire input string (not partial).
 */

class Solution 
{
    public boolean isMatch(String s, String p) 
    {
        // Variables
        boolean[][] dp = new boolean[s.length() + 1][p.length() + 1];
        dp[s.length()][p.length()] = true;
        boolean firstMatch = false;
        
        // working backwords
        for(int i = s.length(); i >= 0; i--)
        {
            for(int j = p.length() - 1; j >= 0; j--)
            {
                firstMatch = (i < s.length() && (p.charAt(j) == s.charAt(i) || p.charAt(j) == '.'));
                if(j + 1 < p.length() && p.charAt(j + 1) == '*')
                {
                    dp[i][j] = dp[i][j + 2] || firstMatch && dp[i + 1][j];
                }
                else
                {
                    dp[i][j] = firstMatch && dp[i + 1][j + 1];
                }
            } // end j for loop
        } // end i for loop
        
        // return
        return dp[0][0];
    }
    
    // Time Complexity: Let T, P be the lengths of the text and the pattern respectively. The work for
    // every call to dp(i, j) for i=0, ... ,T; j=0, ... , P is done once, and it is O(1) work. Hence,
    // the time complexity is O(TP).
    
    // Space Complexity: The only memory we use is the O(TP) boolean entries in our cache. Hence, the
    // space complexity is O(TP).
}
