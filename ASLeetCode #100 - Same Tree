/* Instructions: Given the roots of two binary trees p and q, write a function to check if they are the same or not.
 *
 * Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.
 */

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution 
{
    public boolean isSameTree(TreeNode p, TreeNode q) 
    {
        // if p & q are both null, return true
        if(p == null && q == null)
        {
            return true;
        }
        // if only 1 is null, return false
        if(p == null || q == null)
        {
            return false;
        }
        // Now compare the values && return if the values are the same
        if(p.val != q.val)
        {
            return false;
        }
        // recursive call && return the answer
        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
    }
    
    // Time Complexity: O(N), where N is the # of nodes in the tree, since 1 visits each node exactly
    // once
    
    // Space Complexity: O(log(N))L the bese case of completely balanced tree && O(N) in the worst case
    // of a completely unbalanced tree to keep a recursion stack
}
