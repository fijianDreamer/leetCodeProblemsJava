/* Instructions: Write an algorithm to determine if a number n is happy.
 *
 * A happy number is a number defined by the following process:
 *
 * Starting with any positive integer, replace the number by the sum of the squares of its digits.
 * Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
 * Those numbers for which this process ends in 1 are happy.
 * Return true if n is a happy number, and false if not.
 */

class Solution 
{
    private int getNext(int n)
    {
        // Variables
        int total = 0;
        int d;
        
        // while n != 0, get the digits and it's square value
        while(n > 0)
        {
            d = n % 10; // n % 10 --> ones place
            n = n / 10; // n / 10 --> tens place
            total += d * d;
        } // end while loop
        
        // return
        return total;
    }
    
    public boolean isHappy(int n) 
    {
        // Variables
        Set<Integer> nums = new HashSet<>();

        while(n != 1 && !nums.contains(n))
        {
            nums.add(n);
            n = getNext(n);
        } // end while loop
        
        // return n
        return n == 1;
    }
}
