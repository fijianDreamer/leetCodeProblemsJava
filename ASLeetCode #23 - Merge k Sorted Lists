/* Instructions: You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.
 *
 * Merge all the linked-lists into one sorted linked-list and return it.
 */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution 
{
    public ListNode mergeKLists(ListNode[] lists) 
    {
        // Variables
        List<Integer> nLists = new ArrayList<Integer>();
        
        // for each value in lists, add to nLists -- add all the values to nLists
        for(ListNode ln: lists)
        {
            while(ln != null)
            {
                nLists.add(ln.val);
                ln = ln.next; // go to next one
            }
        } // end for each
        
        // Sort the values in nLists
        Collections.sort(nLists);
        
        // The values are now in ascending order. Add the values to a ListNode and return
        ListNode head = new ListNode();
        ListNode dummyHead = head;
        for(int i : nLists)
        {
            ListNode temp = new ListNode(i);
            dummyHead.next = temp;
            dummyHead = dummyHead.next;
        } // end for each
        
        dummyHead.next = null;
        return head.next;
        
    }
}
