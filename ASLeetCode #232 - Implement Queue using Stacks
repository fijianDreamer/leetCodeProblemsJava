/* Instructions: Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal 
 * queue (push, peek, pop, and empty).
 *
 * Implement the MyQueue class:
 *
 * void push(int x) Pushes element x to the back of the queue.
 * int pop() Removes the element from the front of the queue and returns it.
 * int peek() Returns the element at the front of the queue.
 * boolean empty() Returns true if the queue is empty, false otherwise.
 */

class MyQueue 
{

    // Variables
    private Stack<Integer> s1 = new Stack<>();
    private Stack<Integer> s2 = new Stack<>();
    private int front;
    
    public MyQueue() 
    {
        
    }
    
    // Pushes element x to the back of the queue
    public void push(int x) 
    {
        if(s1.empty())
        {
            front = x;
        }
        s1.push(x);
    }
    
    // Removes the element from the front of the queue and returns it
    public int pop() 
    {
        if(s2.isEmpty())
        {
            while(!s1.isEmpty())
            {
                s2.push(s1.pop());
            }
        }
        return s2.pop();
    }
    
    // Returns the element at the front of the queue
    public int peek() 
    {
        if(!s2.isEmpty())
        {
            return s2.peek();
        }
        return front;
    }
    
    // Returns true if the queue is empty, and false otherwise
    public boolean empty() 
    {
        return s1.isEmpty() && s2.isEmpty();
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */
