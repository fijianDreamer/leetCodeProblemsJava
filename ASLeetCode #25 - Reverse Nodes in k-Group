/* Instructions: Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
 *
 * k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, 
 * in the end, should remain as it is.
 *
 * You may not alter the values in the list's nodes, only nodes themselves may be changed.
 */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution 
{
    // helper function
    public ListNode reverseLL(ListNode head, int k)
    {
        // Variables
        ListNode nHead = null;
        ListNode p = head; // Pointer
        ListNode nNode; // next node
        
        // Reverse k nodes of the given linked list
        while(k > 0)
        {
            // Keep track of the next node to process in original list
            nNode = p.next;
            
            // swap p & nHead
            p.next = nHead;
            nHead = p;
            
            // Go to next node
            p = nNode;
            k--; // decrement k
        } // end while loop
        
        // return the head of the reversed list
        return nHead;
    }
    
    public ListNode reverseKGroup(ListNode head, int k) 
    {
        // Variables
        int count = 0;
        ListNode p = head; // Pointer
        
        // see if there are k nodes in the linked list
        while(count < k && p != null)
        {
            p = p.next;
            count++;
        } // end while loop
        
        if(count == k)
        {
            // if there are k nodes, reverse them & put the result in reversed (trip 1)
            ListNode reversed = this.reverseLL(head, k);
            
            // Now recurse over remaining list
            // the recursion returns the head of the overall processed list, and we use that & the
            // "original" head of the "k" nodes to re-write the connections
            head.next = this.reverseKGroup(p, k);
            return reversed;
        }
        
        return head;
    }
    
    /* Time Complexity: O(N) since we process each node exactly twice. Once when we are counting the
     * number of nodes in each recursive call, and then once when we are actually reversing the 
     * sub-list. A slightly optimized implementation here could be that we don't count the number of
     * nodes at all and simply reverse k nodes. If at any point we find that we didn't have enough
     *nodes, we can re-reverse the last set of nodes so as to keep the original structure as required by      * the problem statement. That ways, we can get rid of the extra counting.
     */
    
    /* Space Complexity: O(N/k) used up by the recursion stack. The number of recursion calls is
     * determined by both kk and NN. In every recursive call, we process kk nodes and then make a
     * recursive call to process the rest.
     */
}
