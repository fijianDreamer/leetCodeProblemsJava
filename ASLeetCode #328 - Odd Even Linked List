/* Instructions: Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and 
 * return the reordered list.
 *
 * The first node is considered odd, and the second node is even, and so on.
 *
 * Note that the relative order inside both the even and odd groups should remain as it was in the input.
 *
 * You must solve the problem in O(1) extra space complexity and O(n) time complexity.
 */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution 
{
    public ListNode oddEvenList(ListNode head) 
    {
        // if the list is empty, return null
        if(head == null)
        {
            return null;
        }
        
        // Variables
        ListNode odd = head; // 1
        ListNode even = head.next; // 2
        ListNode evenHead = even; // even list
        
        // Go thru the list, and swap
        while(even != null && even.next != null) // rules out the list of 1 or 2 nodes
        {
            odd.next = even.next; // 1 -> 3
            odd = odd.next; // 4
            even.next = odd.next; // 2 -> 4
            even = even.next;
        }
         // Went thru the list, now connect evenHead to odd.next and return
        odd.next = evenHead;
        return head;
    }
    
    // Time Complexity: O(n). There are total nn nodes and we visit each node once
    
    // Space Complexity: O(1). All we need is the four pointers
    
}
