    /* Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1
     */
    
    public int firstUniqChar(String s) 
    {
        // If s is null or empty, return -1
        if (s == null || s.length() == 0) 
        {
            return -1;
        }
        
        // Array that holds the # of times a char has occurred
        int[] numOfChar = new int[26];
        
        // If there is an instance of that char, +1
        for (int i = 0; i < s.length(); i++) 
        {
            numOfChar[s.charAt(i) - 'a']++;            
        }
        
        // Now go through original code. Find 1st letter that is found once, return i
        for (int i = 0; i < s.length(); i++) 
        {
            if (numOfChar[s.charAt(i) - 'a'] == 1) 
            {
                return i;
            }
        }
        // Unique char doesn't exist. Return -1
        return -1;
            
    // Time Complexity: O(N) since we go through the string of length N two times.
    
    // Space Complexity: O(1) because English alphabet contains 26 letters.
    }
