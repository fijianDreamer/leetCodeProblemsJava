/* Instructions: You are given row x col grid representing a map where grid[i][j] = 1 represents land and grid[i][j] = 0 represents water.
 *
 * Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island 
 * (i.e., one or more connected land cells).
 *
 * The island doesn't have "lakes", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1. 
 * The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.
 */

class Solution 
{
    public int islandPerimeter(int[][] grid) 
    {
        // Variables
        int perimeter = 0;
        int row = grid.length;
        int col = grid[0].length;
        int up, down, left, right;
        
        // while r < row, and c < col, if you landed on land (grid[r][c] == 1), and count the perimeter 
        // of the land touched by water 
        for(int r = 0; r < row; r++)
        {
            for(int c = 0; c < col; c++)
            {
                if(grid[r][c] == 1)
                {
                    if(r == 0)
                    {
                        up = 0; // at the most top row
                    }
                    else
                    {
                        up = grid[r-1][c];
                    }
                    if(c == 0)
                    {
                        left = 0; // at the most left col
                    }
                    else
                    {
                        left = grid[r][c-1];
                    }
                    if(r == (row - 1))
                    {
                        down = 0; // at the most lowest row
                    }
                    else
                    {
                         down = grid[r+1][c];
                    }
                    if(c == (col - 1))
                    {
                        right = 0; // at the most right col
                    }
                    else
                    {
                         right = grid[r][c+1];
                    }
                    
                    // Now add to the perimeter
                    perimeter += 4 - (up + right + down + left);
                    
                }
            }
        }
        
        // return
        return perimeter;
    } // end function
    
    // Time Complexity: O(mn) where m is the # of rows of the grid & n is the # of columns of the grid
    // Since there are two for loops to go through all the cells in the grid, for a 2-D grid of size
    // m x n, have to check mn cells
    
    // Space Complexity: O(1) b/c only the perimeter variable is updates and no other space requirement
    // is needed
    
}
