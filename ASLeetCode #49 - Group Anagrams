/* Instructions: Given an array of strings strs, group the anagrams together. You can return the answer in any order.
 *
 * An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.
 *
 */

class Solution 
{
    public List<List<String>> groupAnagrams(String[] strs) 
    {
        HashMap <String, List> map = new HashMap<>();
        // For every word, sort the characters in the word into alphabetical order
        for(String word : strs)
        {
            char[] characters = word.toCharArray();
            Arrays.sort(characters); // this is done b/c the arrangement doesnt matter
            String sorted = new String (characters);
            // Is sorted in HashMap? Sorted = key. values are original word
            if(!map.containsKey(sorted))
            {
                map.put(sorted, new ArrayList<>());
            }
            map.get(sorted).add(word); // sorted is in HashMap, get it, & add this word
        }
        return new ArrayList(map.values());
    }
    
    // Time Complexity: O(NKlogK), where N is the length of strs, and K is the maximum length of a
    // string in strs. The outer loop has complexity O(N) as we iterate through each string. Then, 
    // we sort each string in O(KlogK) time.
    
    // Space Complexity: O(NK), the total information content stored in map
}
