/* Instructions: The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.
 *
 * You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.
 *
 * For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. 
 * If there is no next greater element, then the answer for this query is -1.
 *
 * Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.
 */

class Solution 
{
    public int[] nextGreaterElement(int[] nums1, int[] nums2) 
    {
        Stack<Integer> ngeStack = new Stack<>();
        HashMap<Integer, Integer> map = new HashMap<>(); // HashMap<key, value>
        
        // for each # in nums2
        for(int i = 0; i < nums2.length; i++)
        {
            // while the stack is not empty, and this # is > than the last
            while(!ngeStack.empty() && nums2[i] > ngeStack.peek())
            {
                map.put(ngeStack.pop(), nums2[i]); // put that value, and it's greater value in map
            }
            ngeStack.push(nums2[i]);
        } // end for loop
        
        // while the stack is not empty, pop the value, along with -1. did not find a greater #
        while(!ngeStack.empty())
        {
            map.put(ngeStack.pop(), -1);
        }
        // while i < length of nums1, get the value and put it in result
        int[] result = new int[nums1.length];
        for(int i = 0; i < nums1.length; i++)
        {
            result[i] = map.get(nums1[i]);
        }
        return result;
    }
    
    Time complexity: O(n)O(n). The entire nums2nums2 array (of size nn) is scanned only once. Each of the stack's nn elements are pushed and popped 
    exactly once. The nums1nums1 array is also scanned only once. All together this requires O(n + n + m)O(n+n+m) time. Since nums1nums1 must be a 
    subset of nums2nums2, we know mm must be less than or equal to nn. Therefore, the time complexity can be simplified to O(n)O(n).

Space complexity: O(n)O(n). mapmap will store nn key-value pairs while stackstack will contain at most nn elements at any given time.
}
