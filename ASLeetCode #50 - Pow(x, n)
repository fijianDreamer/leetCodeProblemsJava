// Instructions: Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

class Solution 
{
    private double helper(double x, long n)
    {
        // Case: n == 0, that's always 1
        if(n == 0)
        {
            return 1.0;
        }
        // break the multipicaton into 2s to be faster
        double half = helper(x, n/2);
                // if even, return 1/2 * 1/2, else return 1/2 * 1/2 * x
        if(n % 2 == 0)
        {
            return half * half;
        }
        else
        {
            return half * half * x;
        }

    }
    
    public double myPow(double x, int n) 
    {
        long powN = n;
        // if n < 0, change x into fraction, get inverse of n
        if(powN < 0)
        {
            x = 1 / x;
            powN = -powN;
        }
        return helper(x, powN);
        
        // Time Complexity: O(logn), b/c For each bit of n 's binary representation, we will at most multiply once. Space Complexity: O(1) b/c We only need 
        // two variables for the current product and the final result of x.
    }
}
