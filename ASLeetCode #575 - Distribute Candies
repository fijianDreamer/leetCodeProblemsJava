/* Instructions: Alice has n candies, where the ith candy is of type candyType[i]. Alice noticed that she started to gain weight, so she visited a 
 * doctor.
 *
 * The doctor advised Alice to only eat n / 2 of the candies she has (n is always even). Alice likes her candies very much, and she wants to eat the 
 * maximum number of different types of candies while still following the doctor's advice.
 *
 * Given the integer array candyType of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them.
 */

class Solution 
{
    public int distributeCandies(int[] candyType) 
    {
        // Variables
        int types = 0;
        Set<Integer> candies = new HashSet<>();
        int diffCandies = 0;
        
        // Go thru the diff candy types and put the diff types in candies
        for(int candy : candyType)
        {
            candies.add(candy);
        }
        
        // to get the amount of diff candies that Alice can eat, get total of diff candies / 2
        diffCandies = candyType.length / 2;
        
        // if the diff types is < total of diff candies, return the smaller amount
        types = Math.min(diffCandies, candies.size());
        // return
        return types;
    }
    
    // Time Complexity: O(N). Adding an item into a Hash Set has an amortized time of O(1).
    // Therefore, adding N items requires O(N) time. All of the other operations we use are O(1).
    
    // Space Complexity: O(N). The worst case for space complexity occurs when all N elements are
    // unique. This will result in a Hash Set containing N elements.
}
