/* Instructions: Given an m x n grid of characters board and a string word, return true if word exists in the grid.
 *
 * The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same 
 * letter cell may not be used more than once.
 */

class Solution 
{
    // Global Variables
    private char[][] board;
    private int rows;
    private int cols;
    
    public boolean exist(char[][] board, String word) 
    {
        this.board = board;
        this.rows = board.length;
        this.cols = board[0].length;
        
        for(int r = 0; r < this.rows; r++)
        {
            for(int c = 0; c < this.cols; c++)
            {
                if(this.backtrack(r, c, word, 0))
                {
                    return true;
                }
            } // end of c for loop
        } // end of r for loop
        
        // return
        return false;
    } // end of function
    
    protected boolean backtrack(int row, int col, String word, int index)
    {
        // Check the bottom case
        if(index >= word.length())
        {
            return true;
        }
        
        // Check the boundaries
        if(row < 0 || row == this.rows || col < 0 || col == this.cols || this.board[row][col] != word.charAt(index))
        {
            return false;
        }
        
        // Explore the neighbors in Depth First Search
        boolean result = false;
        
        // Mark the path b4 exploring so we know we already went there
        this.board[row][col] = '#';
        
        int[] rowOffSets = {0, 1, 0, -1};
        int[] colOffSets = {1, 0, -1, 0};
        for(int d = 0; d < 4; d++)
        {
            result = this.backtrack(row + rowOffSets[d], col + colOffSets[d], word, index + 1);
            if(result)
            {
                break;
            }
        } // end for loop
        
        // Clean up and return the result
        this.board[row][col] = word.charAt(index);
        return result;
    }
    
    /* Time Complexity: O(N⋅3^L) where N is the # of cells in the board and L is the length of the word
    // to be matched.

For the backtracking function, initially we could have at most 4 directions to explore, but further the choices are reduced into 3 (since we won't go back to where we come from). As a result, the execution trace after the first step could be visualized as a 3-ary tree, each of the branches represent a potential exploration in the corresponding direction. Therefore, in the worst case, the total number of invocation would be the number of nodes in a full 3-nary tree, which is about 3^L

We iterate through the board for backtracking, i.e. there could be N times invocation for the backtracking function in the worst case.

As a result, overall the time complexity of the algorithm would beO(N⋅3^L)

Space Complexity: O(L) where L is the length of the word to be matched.

The main consumption of the memory lies in the recursion call of the backtracking function. The maximum length of the call stack would be the length of the word. Therefore, the space complexity of the algorithm is O(L).
    
    */
}
