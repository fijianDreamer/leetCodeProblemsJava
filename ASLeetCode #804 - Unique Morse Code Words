/* Instructions: International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows:
 *
 * 'a' maps to ".-",
 * 'b' maps to "-...",
 * 'c' maps to "-.-.", and so on.
 * For convenience, the full table for the 26 letters of the English alphabet is given below:
 *
 * [".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",
 * ".--","-..-","-.--","--.."]
 * Given an array of strings words where each word can be written as a concatenation of the Morse code of each letter.
 *
 * For example, "cab" can be written as "-.-..--...", which is the concatenation of "-.-.", ".-", and "-...". We will call such a concatenation the 
 * transformation of a word.
 * Return the number of different transformations among all words we have.
 */

class Solution 
{
    public int uniqueMorseRepresentations(String[] words) 
    {
        // Variables
        Set<String> map = new HashSet<>();
        int total = 0;
        String[] morse = new String[] {".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."};
        
        // for each word in words, see if the transformation of the word is in map, if not, add it
        for(String word : words)
        {
            StringBuilder code = new StringBuilder();
            for(char c : word.toCharArray()) // for every char
            {
                code.append(morse[c-'a']);
            }
            map.add(code.toString());
        }
        
        // return
        return map.size();
    } // end function
    
    // Time Complexity: O(S), where S is the sum of the lengths of words in words. We iterate through
    // each character of each word in words.

    // Space Complexity: O(S)
}
