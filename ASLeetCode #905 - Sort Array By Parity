/* Instructions:
 * Given an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers.
 *
 * Return any array that satisfies this condition.
 *
 */

class Solution 
{
    public int[] sortArrayByParity(int[] nums) 
    {
        // check if nums is empty or null
        if(nums.length == 0 || nums == null)
        {
            return nums;
        }

        // loop through array, swap when necessary
        int i = 0;
        int j = nums.length-1;
        int temp = 0;
        while(i < j) // left side, j is right side
        {
            // if left side is odd, and right side is even swap
            if(nums[i] %2 != 0)
            {
                if(nums[j] %2 == 0)
                {
                    temp = nums[i];
                    nums[i] = nums[j];
                    nums[j] = temp;
                }
            }
            if(nums[i] %2 == 0) // left side is even, let it be, i++
            {
                i++;
            }
            if(nums[j] %2 != 0) // right side is odd, let it be, j--
            {
                j--;
            }

        }
        // return
        return nums;
    }
}
