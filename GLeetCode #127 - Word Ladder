/* Instructions: A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.

 */

class Solution 
{
    public int ladderLength(String beginWord, String endWord, List<String> wordList) 
    {
        // Variables
        int wordLength = beginWord.length();
        Map<String, List<String>> allComboDict = new HashMap<>(); // Holds the combo of words that
        // can be formed from any given word by changing 1 letter at a time
        
        // for each word, mark the difference with '*'
        wordList.forEach(word -> 
                         {
                             for(int i = 0; i < wordLength; i++)
                             {
                                 String newWord = word.substring(0, i) + '*' + word.substring(i + 1, wordLength);
                                 List<String> transformations = allComboDict.getOrDefault(newWord, new ArrayList<>());
                                 transformations.add(word);
                                 allComboDict.put(newWord, transformations);
                              } // end for loop
                         }); // end forEach
        
        // Now Queue for BFS
        Queue<Pair<String, Integer>> que = new LinkedList<>();
        que.add(new Pair(beginWord, 1));
        
        // If visited word, make sure not to repeat the processing of the same word
        Map<String, Boolean> visited = new HashMap<>();
        visited.put(beginWord, true);
        
        while(!que.isEmpty())
        {
            Pair<String, Integer> node = que.remove();
            String aword = node.getKey();
            int level = node.getValue();
            for(int i = 0; i < wordLength; i++)
            {
                // Intermediate words for the current word
                String aNewWord = aword.substring(0, i) + '*' + aword.substring(i + 1, wordLength);
                // Now get the words that are in the transitional stage (intermediate stage)
                for(String adjWord : allComboDict.getOrDefault(aNewWord, new ArrayList<>()))
                {
                    // if we find the end word, return the answer
                    if(adjWord.equals(endWord))
                    {
                        return level + 1;
                    }
                    // else, add it to the BFS Queue (que)
                    if(!visited.containsKey(adjWord))
                    {
                        // if the word is not in visited, add it
                        visited.put(adjWord, true);
                        que.add(new Pair(adjWord, level + 1));
                    }
                }
            }
        }
        return 0;
    }
    
    /* Time Complexity: Time Complexity: O({M}^2 x N) where M is the length of each word and N is the total # of words in the input word list.

* For each word in the word list, we iterate over its length to find all the intermediate words corresponding to it. Since the length of each word is M and we have N words, the total # of iterations the algorithm takes to create all_combo_dict is M×N. Additionally, forming each of the intermediate word takes O(M) time because of the substring operation used to create the new string. This adds up to a complexity of O({M}^2 x N)

* Breadth first search in the worst case might go to each of the N words. For each word, we need to examine M possible intermediate words/combinations. Notice, we have used the substring operation to find each of the combination. Thus, M combinations take O({M}^2 x N) time. As a result, the time complexity of BFS traversal would also be O({M}^2 x N).

Combining the above steps, the overall time complexity of this approach is O({M}^2 x N).
*/

    /* Space Complexity : O({M}^2 x N)

* Each word in the word list would have M intermediate combinations. To create the all_combo_dict dictionary we save an intermediate word as the key and its corresponding original words as the value. Note, for each of M intermediate words we save the original word of length M. This simply means, for every word we would need a space of {M}^2 to save all the transformations corresponding to it. Thus, all_combo_dict would need a total space of O({M}^2 x N)

* Visited dictionary would need a space of O(M x N)O(M×N) as each word is of length M.

* Queue for BFS in worst case would need a space for all O(N) words and this would also result in a space complexity of O(M×N).
Combining the above steps, the overall space complexity is O({M}^2 x N) + O(M * N) + O(M * N) = O({M}^2 x N) space.
    */
    
}
