/* Instructions: Given an array nums which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous 
 * subarrays.
 *
 * Write an algorithm to minimize the largest sum among these m subarrays.
 */

class Solution 
{
    // Global Variables
    Integer[][] memo = new Integer[1001][51]; 
    // Defined it as per the maximum size of array and split count
    // But can be defined with the input size as well
    
    private int getMinLargestSplitSum(int[] prefixSum, int currIndex, int subarrayCount)
    {
        // Variables
        int n = prefixSum.length - 1;
        int minLargestSplitSum = Integer.MAX_VALUE;
        
        // Base Case: Calculation is done, so return
        if(memo[currIndex][subarrayCount] != null)
        {
            return memo[currIndex][subarrayCount];
        }
        
        // Case: There is 1 subarray left, so all of the remaining #s go into that subarray. Return
        // the sum of those #s
        if(subarrayCount == 1)
        {
            return memo[currIndex][subarrayCount] = prefixSum[n] - prefixSum[currIndex];
        }
        
        // else determine the min largest subarray
        // get the sum between the currIndex & the end of the array w/subarrayCount subarrays remaining
        for(int i = currIndex; i <= n - subarrayCount; i++)
        {
            // save the sum of the 1st subarray
            int firstSum = prefixSum[i+1] - prefixSum[currIndex];
            // get the max subarray sum for the current split
            int largestSplitSum = Math.max(firstSum, getMinLargestSplitSum(prefixSum, i+1, subarrayCount-1));
        
             // get the min among all the possible combos
             minLargestSplitSum = Math.min(minLargestSplitSum, largestSplitSum);
            
            // if the first sum of the subarray is >= the other combos, exit for loop
            if(firstSum >= minLargestSplitSum)
            {
                break;
            }
        } // end for loop
        
        // return
        return memo[currIndex][subarrayCount] = minLargestSplitSum;
        
    } // end function
    
    public int splitArray(int[] nums, int m) 
    {
        // Variables
        int n = nums.length;
        int[] prefixSum = new int[n+1];
        
        for(int i = 0; i < n; i++)
        {
            prefixSum[i+1] = prefixSum[i] + nums[i];
        } // end for loop
        
        return getMinLargestSplitSum(prefixSum, 0, m);
    } // end function
    
    /* Time Complexity: O(N^2 * M)

     * Each state is defined by the values currIndex and subarrayCount. As such, there are N⋅M possible
     states, and we must visit almost every state in order to solve the original problem. Each state
     (subproblem) requires O(N) time because we have a for loop from currIndex to N - subarrayCount.
     Thus the total time complexity is equal to O(N^2 * M)
    */
    
    /* Space Complexity: O(N⋅M)

     * The memoization results are stored in the table memo with size N⋅M. Also, stack space in the
     recursion is equal to the maximum # of active functions. The maximum # of active functions can be
     equal to M as we only make a recursive call when splitting the array and we do not make a recursive
     call when there is only 1 subarray remaining. Hence, the space complexity is equal to O(N⋅M).
    
    */
}
