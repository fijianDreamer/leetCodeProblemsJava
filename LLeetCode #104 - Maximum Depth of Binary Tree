/* Instructions: Given the root of a binary tree, return its maximum depth.
 *
 * A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.
 */

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution 
{
    public int maxDepth(TreeNode root) 
    {
        // Variables
        int leftSide;
        int rightSide;
        
        // Base Case: if value of root is null, return 0
        if(root == null)
        {
            return 0;
        }
        // else, + 1 to length, and pass the values for the left and right nodes
        // using dfs to go down left side and right side of the tree
        else
        {
            leftSide = maxDepth(root.left); // left side
            rightSide = maxDepth(root.right); // right side
            // return longest length between the left & right side, + 1 for the length
            return Math.max(leftSide, rightSide) + 1;
        }
    }
    // Time complexity : We visit each node exactly once, thus the time complexity is O(N), where N is
    // the # of nodes.
    
    // Space complexity : In the worst case, the tree is completely unbalanced, e.g. each node has only
    // left child node, the recursion call would occur N times (the height of the tree), therefore the
    // storage to keep the call stack would be O(N). But in the best case (the tree is completely
    // balanced), the height of the tree would be log(N). Therefore, the space complexity in this case
    // would be \mathcalO(log(N)).
}

/*
------------------------------------------------------------------------------------------
How I solved the problem on 7/31/24

    public int maxDepth(TreeNode root) 
    {
        if(root == null)
        {
            return 0;
        }

        // else go down the left & right side
        int leftSide = maxDepth(root.left) + 1;
        int rightSide = maxDepth(root.right) + 1;

        return Math.max(leftSide, rightSide);   
    }
------------------------------------------------------------------------------------------
*/

