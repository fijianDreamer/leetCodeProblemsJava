/* Instructions: Given two strings s and t, determine if they are isomorphic.
 *
 * Two strings s and t are isomorphic if the characters in s can be replaced to get t.
 * 
 * All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the 
 * same character, but a character may map to itself.
 */

class Solution 
{
    public boolean isIsomorphic(String s, String t) 
    {
        // Variables
        int[] mappingDictSToT = new int[256];
        Arrays.fill(mappingDictSToT, -1);
        int[] mappingDictTToS = new int[256]; // map from t to s
        Arrays.fill(mappingDictTToS, -1);
        char c1;
        char c2;
        
        for(int i = 0; i < s.length(); i++)
        {
            c1 = s.charAt(i);
            c2 = t.charAt(i);
            // Case 1: There isn't a mapping in either of the dictionaries
            if(mappingDictSToT[c1] == -1 && mappingDictTToS[c2] == -1)
            {
                mappingDictSToT[c1] = c2;
                mappingDictTToS[c2] = c1;
            }
            // Case 2: Either mapping doesn't exist in 1 of the dictionaries OR mapping exists & it
            // doesn't match in 1 or both of the dictionaries
            else if(!(mappingDictSToT[c1] == c2 && mappingDictTToS[c2] == c1))
            {
                return false;
            }
        } // end of for loop
        return true;
    }
    
    /* Here NN is the length of each string (if the strings are not the same length, then they cannot be
     * isomorphic).
     *
     * Time Complexity: O(N). We process each character in both the strings exactly once to
     * determine if the strings are isomorphic.
     *
     * Space Complexity: O(1) since the size of the ASCII character set is fixed and the keys in our
     * dictionary are all valid ASCII characters according to the problem statement.
     */
}
