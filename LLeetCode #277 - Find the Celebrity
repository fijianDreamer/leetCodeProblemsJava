/* Instructions: Suppose you are at a party with n people labeled from 0 to n - 1 and among them, there may exist one celebrity. The definition of a 
 * celebrity is that all the other n - 1 people know the celebrity, but the celebrity does not know any of them.
 *
 * Now you want to find out who the celebrity is or verify that there is not one. The only thing you are allowed to do is ask questions like: "Hi, A. 
 * Do you know B?" to get information about whether A knows B. You need to find out the celebrity (or verify there is not one) by asking as few questions 
 * as possible (in the asymptotic sense).
 *
 * You are given a helper function bool knows(a, b) that tells you whether A knows B. Implement a function int findCelebrity(n). There will be exactly 
 * one celebrity if they are at the party.
 *
 * Return the celebrity's label if there is a celebrity at the party. If there is no celebrity, return -1.
 */

/* The knows API is defined in the parent class Relation.
      boolean knows(int a, int b); */

public class Solution extends Relation 
{
    public int findCelebrity(int n) 
    {
        // go through and see if i is a celebrity
        for(int i = 0; i < n; i++)
        {
            if(isCelebrity(i,n))
            {
                return i;
            }
        }

        // return
        return -1;
    }
    
    // helper function to see if i is a celebrity
    public boolean isCelebrity(int i, int n)
    {
        for(int j = 0; j < n; j++)
        {
            if(i == j)
            {
                // same person, continue
                continue;
            }
            if(knows(i,j) || !knows(j,i))
            {
                // if (i knows j, i knows someone, so not a celebrity) or (j doesn't know i, i is not a
                // celebrity)
                return false;
            }
        }
        return true;
    }
    
    /* Time Complexity: Time Complexity : O(n^2)
     *
     * For each of the n people, we need to check whether or not they are a celebrity.
     *
     * Checking whether or not somebody is a celebrity requires making 2 API calls for each of the
     * n - 1 other people, for a total of 2⋅(n−1)=2⋅n−2 calls. In big-oh notation, we drop the
     * constants, leaving O(n).
     *
     * So each of the n celebrity checks will cost O(n), giving a total of O(n^2)
     */
    
    /* Space Complexity: O(1).
     * Our code only uses constant extra space. The results of the API calls are not saved.
     */
}
