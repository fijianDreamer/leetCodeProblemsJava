/* Instructions: Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t 
 * (including duplicates) is included in the window. If there is no such substring, return the empty string "".
 *
 * The testcases will be generated such that the answer is unique.
 *
 * A substring is a contiguous sequence of characters within the string.
 */

class Solution 
{
    public String minWindow(String s, String t) 
    {
        // if t > s, or s or t == 0, return an empty string
        if(t.length() > s.length() || s.length() == 0 || t.length() == 0)
        {
            return "";
        }
        
        // Variables
        StringBuilder bestWord = new StringBuilder(); // holds the current best word
        Map<Character, Integer> dictOfT = new HashMap<Character, Integer>(); // keeps track of all the
        // characters in t
        int left = 0;
        int right = 0;
        int formed = 0; // keeps track of # of unique characters in t that are present in the current
        // window
        Map<Character, Integer> windowCounts = new HashMap<Character, Integer>(); // keeps a count
        // of all the unique characters in the current window
        int[] ans = {-1, 0, 0}; // the form : (window length, left, right)
        char c;
        int count = 0;
        
        // Add the characters of t into dictOfT. Keeps track of all the unique characters in t
        for(int i = 0; i < t.length(); i++)
        {
            count = dictOfT.getOrDefault(t.charAt(i), 0);
            dictOfT.put(t.charAt(i), count + 1);
        }
        
        int required = dictOfT.size(); // # of unique characters in t that need to be in the desired
        // window
        
        while(right < s.length())
        {
            // Add 1 character from the right to the window
            c = s.charAt(right);
            // add that character to windowCounts(if not in there already), add 1 to the amount of that
            // character
            count = windowCounts.getOrDefault(c, 0);
            windowCounts.put(c, count + 1);
            
            // if the frequency of the current character is equal to the desired count in t, then 
            // increment formed by 1
            if(dictOfT.containsKey(c) && windowCounts.get(c).intValue() == dictOfT.get(c).intValue())
            {
                formed++;
            }
            
            // Try to reduce the window til the point where it stops being 'desireable'
            while(left <= right && formed == required)
            {
                c = s.charAt(left);
                // Save the smallest window til now
                if(ans[0] == -1 || right - left + 1 < ans[0])
                {
                    ans[0] = right - left + 1;
                    ans[1] = left;
                    ans[2] = right;
                }
                // the character at the position pointed by the left pointer is no longer part of the
                // window
                windowCounts.put(c, windowCounts.get(c) - 1);
                if(dictOfT.containsKey(c) && windowCounts.get(c).intValue() < dictOfT.get(c).intValue())
                {
                    formed--;
                }
                // Move the left pointer forward. This will help to look for a new window
                left++;
            }
            
            // Keep expanding the window now that we are done contracting
            right++;
        } // end of while loop
        
        return ans[0] == -1 ? "" : s.substring(ans[1], ans[2] + 1);
        
    }
    
    /* Time Complexity: O(∣S∣+∣T∣) where |S| and |T| represent the lengths of strings S and T. In the
     * worst case we might end up visiting every element of string S twice, once by left pointer and
     * once by right pointer. ∣T∣ represents the length of string T.
     *
     * Space Complexity: O(∣S∣+∣T∣). ∣S∣ when the window size is equal to the entire string S. ∣T∣ when
     * T has all unique characters.
     */
}
