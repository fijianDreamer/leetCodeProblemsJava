/* Instructions: You are given an integer array prices where prices[i] is the price of a given stock on the ith day.
 *
 * On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then 
 * immediately sell it on the same day.
 *
 * Find and return the maximum profit you can achieve.
 */

class Solution 
{
    public int maxProfit(int[] prices) 
    {
        // Variables
        int profit = 0;
        int valley = prices[0];
        int peak = prices[0];
        int i = 0;
        
        while(i < prices.length-1)
        {
            while(i < prices.length-1 && prices[i] >= prices[i+1])
            {
                // in the valley
                i++;
            }
            // found valley
            valley = prices[i];
            while(i < prices.length-1 && prices[i] <= prices[i+1])
            {
                // in the peak
                i++;
            }
            // found peak
            peak = prices[i];
            // calculate the difference of the peak and valley, add to the profit
            profit += peak - valley;
        } // end while loop
        
        // return
        return profit;
    }
    
    // Time Complexity: O(n) b/c it's a single pass.
    
    // Space Complexity: O(1) b/c constant space is required.
}
