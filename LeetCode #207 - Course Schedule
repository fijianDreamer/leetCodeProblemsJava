/* Instructions: There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where 
 * prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.
 *
 * For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
 * Return true if you can finish all courses. Otherwise, return false.
 */

class Solution 
{
  public boolean canFinish(int numCourses, int[][] prerequisites) 
  {
    // Variables
    HashMap<Integer, List<Integer>> courseDict = new HashMap<>(); // course -> list of next courses
    boolean[] checked = new boolean[numCourses]; // checks to see if current node's been checked before
    boolean[] path = new boolean[numCourses];

    // First build the graph
    for (int[] relation : prerequisites) 
    {
      // relation[0] depends on relation[1]
      if (courseDict.containsKey(relation[1])) 
      {
        courseDict.get(relation[1]).add(relation[0]);
      } 
      else 
      {
        List<Integer> nextCourses = new LinkedList<>();
        nextCourses.add(relation[0]);
        courseDict.put(relation[1], nextCourses);
      }
    } // end for each

    
    for (int currCourse = 0; currCourse < numCourses; ++currCourse) 
    {
      if (this.isCyclic(currCourse, courseDict, checked, path))
      {
        return false;
      }
    }

    // return
    return true;
  }


  // postorder DFS check that no cycle would be formed starting from currCourse
  protected boolean isCyclic(Integer currCourse, HashMap<Integer, List<Integer>> courseDict,        boolean[] checked, boolean[] path) 
  {
    // Bottom Cases: 
    if (checked[currCourse])
    {
      // this node has been checked, no cycle would be formed with this node.
      return false;
    }
    if (path[currCourse])
    {
      // come across a previously visited node, i.e. detect the cycle
      return true;
    }
    // no following courses, no loop.
    if (!courseDict.containsKey(currCourse))
    {
      return false;
    }

    // before backtracking, mark the node in the path
    path[currCourse] = true;

    boolean ret = false;
      
    // Postorder DFS, to visit all its children first.
    for(Integer child : courseDict.get(currCourse)) 
    {
      ret = this.isCyclic(child, courseDict, checked, path);
      if (ret)
      {
        break;
      }
    }

    // after the visits of children, we come back to process the node itself
    // remove the node from the path
    path[currCourse] = false;

    // Now that we've visited the nodes in the downstream,
    // we complete the check of this node.
    checked[currCourse] = true;
      
    // Return
    return ret;
      
  } // end function
}
