/* Instructions: You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits 
 * are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.
 *
 * Increment the large integer by one and return the resulting array of digits.
 */

class Solution 
{
    public int[] plusOne(int[] digits) 
    {
        // Variables
        int len = digits.length;
        
        // Move along digits from right to left
        for(int i = len -1; i >= 0; i--)
        {
            // if digit is 9, set to 0
            if(digits[i] == 9)
            {
                digits[i] = 0;
            }
            else
            {
                // digit is < 9. Add 1 to digit and return
                digits[i]++;
                return digits;
            }
        }
        
        // The most left digit is 9. Need to make a longer int[] and return
        digits = new int[len + 1];
        digits[0] = 1;
        
        // return
        return digits;
    }
    
    // Time Complexity: O(N) b/c we only go through the int[] once
    
    // Space Complexity: O(N) b/c in worst case, we will need to allocate space (make int[] larger)
}
