/* Instructions: Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit 
 * integer range [-231, 231 - 1], then return 0.
 *
 * Assume the environment does not allow you to store 64-bit integers (signed or unsigned).
 */

class Solution 
{
    public int reverse(int x) 
    {
        // Variables
        int reversedNum = 0;
        int pop;
        
        // while not at the end of the #
        while(x != 0)
        {
            // pop the last digit
            pop = x % 10;
            // update x by getting the rest of the number
            x /= 10;
            
            // check to see if there is overflow, return 0
            if(reversedNum > Integer.MAX_VALUE / 10 || (reversedNum == Integer.MAX_VALUE / 10 && pop > 7))
            {
                return 0;
            }
            if(reversedNum < Integer.MIN_VALUE / 10 || (reversedNum == Integer.MAX_VALUE / 10 && pop < -8))
            {
                return 0;
            }
            
            // There is no overflow. Add to reversedNum
            reversedNum = reversedNum * 10 + pop;
        } // end while loop
        
        return reversedNum;
    } // end function
    
    // Time Complexity: O(log(x)) because there are roughly log10(x) digits in x
    
    // Space Complexity: O(1)
}
