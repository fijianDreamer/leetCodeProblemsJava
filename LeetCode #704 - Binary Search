/* Instructions: Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target 
 * exists, then return its index. Otherwise, return -1.
 *
 * You must write an algorithm with O(log n) runtime complexity.
 */

class Solution 
{
    public int search(int[] nums, int target) 
    {
        // Get the size of nums
        int numsSize = nums.length;
        // Get the index & value of 1/2 of nums. Is target > or < 1/2 of nums
        int fHalf = numsSize / 2;
        if(nums[fHalf] == target)
        {
            return fHalf;
        }
        // If target is out of bounds, return -1
        else if((nums[0] > target) || (nums[numsSize-1] < target))
        {
            return -1;
        }
        // If target is > 1/2 nums, find target
        else if(nums[fHalf] < target )
        {
            // Target found, return target
            for(int i = fHalf + 1; i < numsSize; i++)
            {
                if(nums[i] == target)
                {
                    return i;
                }
            }
        }
        // Target is < 1/2 nums.
        else if(nums[fHalf] >= target )
        {
            // Target found, return target
            for(int i = 0; i <= fHalf; i++)
            {
                // Target found, return target
                if(nums[i] == target)
                {
                    return i;
                }
            }
        }
        // Else, target is not in nums, return -1
        return -1;
    }
}
