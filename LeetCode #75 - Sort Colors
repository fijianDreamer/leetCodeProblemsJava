/* Instructions: Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors
 * in the order red, white, and blue.
 *
 * We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
 *
 * You must solve this problem without using the library's sort function.
 */

class Solution 
{
    public void sortColors(int[] nums) 
    {
        // left is initialized at nums[0]
        // current = current index to consider
        int left = 0, current = 0;
        // right is initialized at nums length - 1
        int right = nums.length - 1;
        int temp;
        while (current <= right) 
        {
              if (nums[current] == 0) 
              {
                // swap left and current elements. Move both pointers inward (++)
                // left++ and current++
                temp = nums[left];
                nums[left++] = nums[current];
                nums[current++] = temp;
              }
              else if (nums[current] == 2) 
              {
                // swap right and current elements. Move right to the left, working inward (--)
                temp = nums[current];
                nums[current] = nums[right];
                nums[right--] = temp;
              }
              else
              {
                  current++;
              }
        } // end while
    }
}
